@page "/AccountReview"
@page "/AccountReview.aspx"
@layout NoMenuLayout
@implements IDisposable
@using BTOnlineBlazor
@using BTOnlineBlazor.Data
@using BTOnlineBlazor.Models
@using BTOnlineBlazor.App_Code
@using BTOnlineBlazor.Services
@using C1.Blazor.Grid
@using C1.DataCollection
@using C1.DataCollection.EntityFrameworkCore
@using System.Diagnostics
@using Microsoft.AspNetCore.WebUtilities

@inject IHttpContextAccessor HttpContextAccessor
@inject BTOnlineBlazor.Services.ErrorReporterService errReport
@inject BtDbContext _context
@inject NavigationManager NavManager



<PageTitle>Account Review</PageTitle>

<h1></h1>


<p>Welcome to your BookTrakker Subscription Account page. Please verify that the account total below is correct. You will only need to do this once, unless you need update your subscription in the future, in which case you will just repeat the process.</p>
<p>Thank you,</p>
<p>BookTrakker Sales and Support</p>

<br />
<br />


@if (Items == null)
{
    <p><em>Please wait while we load the account data.</em></p>
}
else
{

    <table cellpadding="0" cellspacing="0">

        <thead>
            <tr>
                <th width="200"></th>
                <th width="100"></th>
            </tr>
        </thead>

        <tr>
            <td>Listing Site Charge</td>
            <td>@ListingSiteCharge.ToString("C")</td>
        </tr>
        <tr>
            <td>Option Total</td>
            <td>@OptionTotal.ToString("C")</td>
        </tr>
        <tr>
            <td>ImageIt Total</td>
            <td>@ImageItCost.ToString("C")</td>
        </tr>
        <tr>
            <td>Computer Total</td>
            <td>@ComputerTotal.ToString("C")</td>
        </tr>
        <tr>
            <td>Account Total</td>
            <td>@AccountTotal.ToString("C")</td>
        </tr>

    </table>

    <br />
    <br />

    <FlexGrid ItemsSource="Items"
          AutoGenerateColumns="false"
          ColumnHeaderGridLinesBrush="@("#ffff00")"
          ColumnHeaderStyle="@("background-color:grey; color: #ffffff;")"
          GroupRowStyle="@("background-color:darkgrey; color: white;")">

        <FlexGridColumns>
            <GridColumn Binding="AppName" Header="App Name">
            </GridColumn>
            <GridColumn Binding="Edition" Header="Edition">
            </GridColumn>
            <GridColumn Binding="Rate" Header="Rate" Format="C" Aggregate="GridAggregate.Sum">            </GridColumn>

        </FlexGridColumns>
    </FlexGrid>
}



@code {
    [Parameter]
    public string AccountID { get; set; } = null!;
    private bool isLoading = true;
    protected bool isInitialized = false;
    //private bool firstRender = true;

    //private BtDbContext _context = BtDbContextFactory.Instance.CreateContext();

    protected AccountReviewData mAccountData = null!;

    protected C1DataCollection<AccountReviewListItem> mItems = null!;

    public AccountReviewListItem?[] AccountDataList { get => mAccountData.AccountData; }

    public C1DataCollection<AccountReviewListItem> Items { get => mItems; }

    public int Count { get => mAccountData.Count; }

    public decimal AccountTotal { get => mAccountData.AccountTotal; }

    public decimal ListingSiteCharge { get => mAccountData.ListingSiteCharges; }

    public decimal ImageItCost { get => mAccountData.ImageItCost; }

    public decimal ComputerTotal { get => mAccountData.ComputerTotal; }

    public decimal OptionTotal { get => mAccountData.OptionTotal; }

    public AccountReview()
    {
        try
        {

        }
        catch (Exception ex)
        {
            errReport.LogErr(ex);
        }
    }

    protected override void OnInitialized()
        => isInitialized = !(HttpContextAccessor.HttpContext is not null && HttpContextAccessor.HttpContext.Response.HasStarted);


    private async Task InitializeAsync()
    {
        try
        {
            var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("AccountID", out var _code))
            {
                AccountID = Convert.ToString(_code);
            }

            bool dbAvailable = _context.Database.CanConnect();

            Account? account = AccountManagerService.GetAccount(AccountID, _context, errReport);

            if (account is not null)
            {
                mAccountData = new AccountReviewData(_context, errReport, account);

                var collectionView = new C1DataCollection<AccountReviewListItem>(mAccountData.AccountData);
                await collectionView.GroupAsync(c => c.ComputerName);

                mItems = collectionView;
            }

            //firstRender = false;
        }
        catch (Exception ex)
        {

            errReport.LogErr(ex);
        }



        //return ;

        //return Task.FromResult(true);
    }

    private void Initialize()
    {
        try
        {
            var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("AccountID", out var _code))
            {
                AccountID = Convert.ToString(_code);
            }

            bool dbAvailable = _context.Database.CanConnect();

            Account? account = AccountManagerService.GetAccount(AccountID, _context, errReport);

            if (account is not null)
            {
                mAccountData = new AccountReviewData(_context, errReport, account);

                var collectionView = new C1DataCollection<AccountReviewListItem>(mAccountData.AccountData);
                collectionView.GroupAsync(c => c.ComputerName);

                mItems = collectionView;
            }

            //firstRender = false;
        }
        catch (Exception ex)
        {

            errReport.LogErr(ex);
        }



        //return ;

        //return Task.FromResult(true);
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    try
    //    {

    //        isInitialized = firstRender;
    //        //await Initialize();
    //        await base.OnAfterRenderAsync(firstRender);
    //    }
    //    catch (Exception ex)
    //    {
    //        errReport.LogErr(ex);
    //    }
    //}

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (isInitialized)
            {
                await base.OnInitializedAsync();
                return;
            }

            //isInitialized = true;

            await InitializeAsync();

            //await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            errReport.LogErr(ex);
        }
    }

    //protected override async Task OnParametersSetAsync()
    //{
    //    if(isInitialized)
    //    {
    //        return;
    //    }
    //    isInitialized = true;
    //    await Initialize();
    //    await base.OnParametersSetAsync();
    //}

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    Console.WriteLine("Bink");

    //    //if (firstRender)
    //    //{
    //    //    Console.WriteLine("Bink");
    //    //    //await OnInitializedAsync();
    //    //}
    //    //else
    //    //{
    //    //    await Initialize();
    //    //}
    //}

    public void Dispose()
    {
        Console.WriteLine("Bink");
    }
}
